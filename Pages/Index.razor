@page "/"
@inherits BaseClass
@using TreeBuilder.Classes
@using TreeBuilder.ComponentsRedux.TelerikUI;
@using System.Timers

@inject StorageService StorageService
@inject RenderService RenderService
@inject EventState EventState
@inject Classes.Version Version

@namespace TreeBuilder.Pages

<div class="container" @ondragenter="(() => HandleOnDragEnter(this))">
    <i id="help" class="fas fa-question-circle fa-3x p-3 help-button" @onclick="LaunchHelp"></i>
    <div class="row">
        <div class="col-6 text-center">
            <h2>Interfaces</h2>
        </div>
        <div class="col-6 text-center">
            <h2>Integrations</h2>
        </div>
    </div>
    <div id="buttonsgroup" class="row">
        <div class="col col-6 tb-addbuttons">
            <i id="addgroup" class="fas fa-layer-group fa-3x p-3" @onclick="AddGroup"></i>
            <i id="addinterface" class="fas fa-link fa-3x p-3" @onclick="AddInterface"></i>
            <i id="clearall" class="fas fa-backspace fa-3x p-3" @onclick="ClearAll"></i>
        </div>
        <div class="col col-6 tb-addbuttons">
            
            <i id="addnode" class="fas fa-file-export fa-3x p-3" @onclick="AddIntegrationNode"></i>
        </div>
    </div>
    <div class="row">
        <div class="col col-6">
            <GroupField @ref="fieldRef"></GroupField>
        </div>
        <div class="col col-6">
            <IntegrationField @ref="integrationRef"></IntegrationField>
        </div>
    </div>

    <div class="row">
        <div class="col col-6">
            <div class="tb-trash"
                 ondragover="event.preventDefault()"
                 @ondrop:stopPropagation
                 @ondrop="(()=>WindowsRef.ShowDeleteWindow())">
                <i id="TrashCan" class="fas fa-trash fa-6x"></i>
            </div>
            
        </div>
        <div class="col col-6">
            <!-- Where the floating Node will go -->
            <IntegrationGhostNode @ref="ghostRef"></IntegrationGhostNode>
        </div>
    </div>
</div>

    <ContextMenu @ref="ContextMenuRef"></ContextMenu>
    <ModalWindows @ref="WindowsRef"></ModalWindows>



@code {

    public GroupField fieldRef { get; set; }
    public IntegrationField integrationRef { get; set; }
    public IntegrationGhostNode ghostRef { get; set; }

    protected override void OnInitialized() {
        Console.WriteLine("TreeBuilder. Version: " + Version);
    }

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            RenderService.GroupField = fieldRef;
            RenderService.IntegrationField = integrationRef;
            RenderService.GhostNode = ghostRef;
            RenderService.App = this;
            ((IJSInProcessRuntime)JS).InvokeVoid("BindToolTipsToIcons");
        }
    }

    public void AddGroup() {
        var grp = new Group(StorageService.GroupField);
        EventState.RuntimeGroups[grp.Guid] = grp;
        StorageService.GroupField.GroupItems.Add(grp);
        StorageService.SaveToSessionStorage();
        RenderService.Redraw();
    }

    public void AddInterface() {
        var iface = new Interface(StorageService.GroupField);
        EventState.RuntimeInterfaces[iface.Guid] = iface;
        StorageService.GroupField.GroupItems.Add(iface);
        StorageService.SaveToSessionStorage();
        RenderService.Redraw();
    }

    public void AddIntegrationNode() {
        var node = new IntegrationNode(StorageService.IntegrationField);
        EventState.RuntimeIntegrations[node.Guid] = node;
        StorageService.IntegrationField.GroupItems.Add(node);
        StorageService.SaveToSessionStorage();
        RenderService.Redraw();
    }

    public void ClearAll()
    {
        StorageService.GroupField.GroupItems.Clear();
        StorageService.IntegrationField.GroupItems.Clear();
        EventState.RuntimeGroups.Clear();
        EventState.RuntimeIntegrations.Clear();
        EventState.RuntimeInterfaces.Clear();
        StorageService.SaveToSessionStorage();
        RenderService.Redraw();
    }

    
    
    public void SetupHelp()
    {
        GroupField g = StorageService.GroupField;
        IntegrationField i = StorageService.IntegrationField;

        StorageService.GroupField = new GroupField();
        StorageService.IntegrationField = new IntegrationField();
        
        Group ng = new Group();
        ng.Parent = StorageService.GroupField;
        ng.CssClass = "ExGroup";
        Interface ig = new Interface(g);
        ig.Parent = ng;
        ig.CssClass = "ExInterface";
        ng.GroupItems.Add(ig);
        IntegrationNode inn = new IntegrationNode(i);
        inn.CssClass = "ExIntegrationNode";
        StorageService.GroupField.GroupItems.Add(ng);
        StorageService.IntegrationField.GroupItems.Add(inn);
        EventState.DraggingEvent = true;

        StateHasChanged();
        RenderService.Redraw();

    }
    
    public async void LaunchHelp()
    {
        SetupHelp();
        await Task.Delay(200);
        ((IJSInProcessRuntime) JS).InvokeVoid("LaunchHelp");
    }

}