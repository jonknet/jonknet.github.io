@page "/"
@using TreeBuilder.Services
@using Newtonsoft.Json
@using Blazored.LocalStorage 
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService;

@inject ComponentTracker ComponentTracker; 
<div class="container">
    <div class="row">
        <div class="col col-6">
            <button @onclick="AddGroup">Add a group</button><br />
            <button @onclick="AddInterface">Add an interface</button><br />
            <button @onclick="AddIntegrationNode">Add an integration node</button><br />
            <button @onclick="(() => StateHasChanged())">Refresh State</button><br />
            <button @onclick="(() => OutputJson())">Output Json</button><br />
        </div>
        <div class="col col-6">
            <!-- Where the floating Node will go -->
            <IntegrationNode Name="GhostNode" @ref="nodeRef"></IntegrationNode>
        </div>
    </div>
    <div class="row">
        <div class="col col-6">
            <Field SaveToLocalStorageCallback="@SaveState" @ref="fieldRef"></Field>
        </div>
        <div class="col col-6">
            <IntegrationField SaveToLocalStorageCallback=@SaveState Name="IntegrationField" @ref="integrationRef"></IntegrationField>
        </div>
    </div>
    <Trash></Trash>
</div>

@OutJson

@code {

    public State StateImport { get; set; } = new State();

    public Field fieldRef { get; set; }

    public IntegrationField integrationRef { get; set; }

    public IntegrationNode nodeRef { get; set; }

    public string OutJson { get; set; } = "";

    public JsonSerializerSettings settings = new JsonSerializerSettings()
    {
        PreserveReferencesHandling = PreserveReferencesHandling.All,
        NullValueHandling = NullValueHandling.Ignore,
        TypeNameHandling = TypeNameHandling.All
    };

    protected override async void OnInitialized() {
        
    //LoadState();
    }

    protected override void OnParametersSet()
    {

    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ComponentTracker.Add(nodeRef);
            ComponentTracker.Add(integrationRef);
        }

        nodeRef.hidden = true;
    }

    public async void LoadState()
    {

        if (await LocalStorageService.ContainKeyAsync("TreeBuilder_IntegrationField") && await LocalStorageService.ContainKeyAsync("TreeBuilder_GroupField"))
        {
            StateImport.IntegrationField = JsonConvert.DeserializeObject<IntegrationField>(await LocalStorageService.GetItemAsStringAsync("TreeBuilder_IntegrationField"),settings);
            StateImport.GroupField = JsonConvert.DeserializeObject<Field>(await LocalStorageService.GetItemAsStringAsync("TreeBuilder_GroupField"),settings);
        }
        else
        {
            StateImport.IntegrationField = new IntegrationField();

            StateImport.GroupField = new Field();

        }
        StateHasChanged();
    }

    public void OutputJson()
    {
        OutJson = "";


        OutJson = JsonConvert.SerializeObject(fieldRef, settings) + "/n";

    }

    public async void SaveState()
    {
        Console.WriteLine("SaveState");
        await LocalStorageService.SetItemAsync("TreeBuilder_IntegrationField", "");
        await LocalStorageService.SetItemAsync("TreeBuilder_GroupField", "");
        await LocalStorageService.SetItemAsync("TreeBuilder_IntegrationField", JsonConvert.SerializeObject(integrationRef, settings));
        await LocalStorageService.SetItemAsync("TreeBuilder_GroupField", JsonConvert.SerializeObject(fieldRef, settings));
    }


    public void AddGroup(){
        fieldRef.AddGroup();
        //StateImport.GroupField.Redraw();
        SaveState();
    }

    public void AddInterface(){
        fieldRef.AddInterface();
        //StateImport.GroupField.Redraw();
        SaveState();
    }

    public void AddIntegrationNode(){
        integrationRef.AddIntegrationNode();
        //StateImport.IntegrationField.Redraw();
        SaveState();
    }
}

        