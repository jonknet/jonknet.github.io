@page "/"
@inherits BaseClass
@using TreeBuilder.Classes
@using TreeBuilder.ComponentsRedux.TelerikUI;

@inject StorageService StorageService
@inject RenderService RenderService
@inject EventState EventState
@inject Classes.Version Version

@namespace TreeBuilder.Pages

<div class="container" @ondragenter="(()=>HandleOnDragEnter(this))">
    <div class="row">
        <div class="col col-6">
            <button @onclick="AddGroup">Add a group</button><br/>
            <button @onclick="AddInterface">Add an interface</button><br/>
            <button @onclick="AddIntegrationNode">Add an integration node</button><br/>
        </div>
    </div>
    <div class="row">
        <div class="col col-6">
            <GroupField @ref="fieldRef"></GroupField>
        </div>
        <div class="col col-6">
            <IntegrationField @ref="integrationRef"></IntegrationField>
        </div>
    </div>
    
    <div class="row">
        <div class="col col-6">
            <div class="tb-trash" 
                 ondragover="event.preventDefault()"
                 @ondrop:stopPropagation
                 @ondrop="(()=>WindowsRef.ShowDeleteWindow())">
                <i class="fas fa-trash fa-6x"></i>
            </div>
        </div>
        <div class="col col-6">
            <!-- Where the floating Node will go -->
            <IntegrationGhostNode @ref="ghostRef"></IntegrationGhostNode>
        </div>
    </div>
</div>

    <ContextMenu @ref="ContextMenuRef"></ContextMenu>
    <ModalWindows @ref="WindowsRef"></ModalWindows>

@code {

    public GroupField fieldRef { get; set; }
    public IntegrationField integrationRef { get; set; }
    public IntegrationGhostNode ghostRef { get; set; }

    protected override void OnInitialized() {
        Console.WriteLine("TreeBuilder. Version: " + Version);
    }

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            Console.WriteLine("OnAfterRender");
            StorageService.GroupField = fieldRef;
            StorageService.IntegrationField = integrationRef;
            RenderService.GroupField = fieldRef;
            RenderService.IntegrationField = integrationRef;
            RenderService.GhostNode = ghostRef;
            EventState.PopulateDictionary(StorageService.GroupField.GroupItems.Concat(StorageService.IntegrationField.GroupItems).ToList());
        }
    }

    public void AddGroup() {
        var grp = new Group(fieldRef, fieldRef);
        EventState.RuntimeGroups[grp.Guid] = grp;
        fieldRef.GroupItems.Add(grp);
        StorageService.SaveToSessionStorage();
        RenderService.Redraw();
    }

    public void AddInterface() {
        var iface = new Interface(fieldRef, fieldRef);
        EventState.RuntimeInterfaces[iface.Guid] = iface;
        fieldRef.GroupItems.Add(iface);
        StorageService.SaveToSessionStorage();
        RenderService.Redraw();
    }

    public void AddIntegrationNode() {
        var node = new IntegrationNode(integrationRef, integrationRef);
        EventState.RuntimeIntegrations[node.Guid] = node;
        integrationRef.GroupItems.Add(node);
        StorageService.SaveToSessionStorage();
        RenderService.Redraw();
    }

}